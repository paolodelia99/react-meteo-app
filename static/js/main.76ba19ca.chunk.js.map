{"version":3,"sources":["components/NavBar.js","components/Form.js","components/Weather.js","actions/favourites.js","actions/types.js","components/Forecast/ForecastItem.js","components/Forecast/ForecastsCarousel.js","components/SearchPage.js","components/FavouritePage.js","reducers/favouritesReducer.js","reducers/rootReducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","id","Form","error","role","onSubmit","loadWeather","name","autoComplete","placeholder","getSunHour","unix_timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","connect","addCity","newCity","dispatch","payload","cityname","country","weatherIcon","temp_celsius","temp_max","temp_min","description","isSearchPage","pressure","humidity","windSpeed","windDegree","sunrise","sunset","useState","showDetails","setShowDetails","min","max","minMaxTemp","charAt","toUpperCase","slice","onClick","v4","cityName","calculateDate","more","now","setDate","getDate","dd","mm","getMonth","calCelsius","temp","Math","floor","ForecastItem","weatherId","setWeatherIcon","useEffect","setIcon","ForecastsCarousel","foreCastItemList","forecastList","undefined","map","item","i","key","weather","main","console","log","dots","infinite","speed","slidesToShow","slidesToScroll","API_KEY","defaultJSON","SearchPage","getWeather","e","a","async","preventDefault","target","elements","value","city","fetch","api_call","api_call_forecast","json","response","forecastResponse","setState","sys","celsius","wind","deg","list","get_WeatherIcon","state","icon","isForecastingLoading","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","Component","FavouritePage","currentCity","currentCountry","currentWeatherIcon","currentTemp_celsius","currentTemp_max","currentTemp_min","currentDescription","currentPressure","currentHumidity","currentWindSpeed","currentWindDegree","currentSunriseTime","currentSunsetTime","setCurrentCity","fav","split","removeFav","removeCity","favourites","favouritesList","X","size","initialState","loading","combineReducers","action","filter","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","subscribe","throttle","stringify","setItem","saveState","getState","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76ba19ca.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink, Link} from \"react-router-dom\";\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-transparent\">\r\n            <div className=\"d-flex w-50 order-0\">\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\r\n                        aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <Link className=\"navbar-brand ml-3\" to=\"/\">\r\n                    <h5 className=\"py-4 text-white\">\r\n                        React Weather App\r\n                    </h5>\r\n                </Link>\r\n            </div>\r\n            <div className=\"navbar-collapse collapse justify-content-center order-2\" id=\"navbarNav\">\r\n                <ul className=\"navbar-nav justify-content-center pull-sm-left\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link text-light p-3\" to='/'><b>Search</b></NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link text-light p-3\" to='/favourites'><b>Favourites</b></NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\nfunction Form(props) {\r\n    return (\r\n        <div className=\"container h-100\">\r\n            <div>{props.error ? error():null}</div>\r\n            <form onSubmit={props.loadWeather}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3  offset-md-2\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\"/>\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\"/>\r\n                    </div>\r\n                    <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n                        <button className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction error (){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please enter city and country\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, {Fragment, useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {addCity} from \"../actions/favourites\";\r\nimport PropTypes from 'prop-types'\r\nimport { v4 } from 'node-uuid'\r\n\r\nconst Weather = ({\r\n                     addCity,\r\n                     cityname,\r\n                     country,\r\n                     weatherIcon,\r\n                     temp_celsius,\r\n                     temp_max,\r\n                     temp_min,\r\n                     description,\r\n                     isSearchPage,\r\n                     pressure,\r\n                     humidity,\r\n                     windSpeed,\r\n                     windDegree,\r\n                     sunrise,\r\n                     sunset,\r\n}) => {\r\n    const [showDetails,setShowDetails] = useState(false);\r\n\r\n    const toggleDetails = ()=>{\r\n        setShowDetails(!showDetails)\r\n    };\r\n\r\n    /*fixme: errorone nel local storage salvo  il meteo del determinato giorno che l'ho aggiunto ai preferiti\r\n    *  devo salvare solo il nome della città e la nazione, e allo scatenarsi dell'evente devo fare la request*/\r\n    const addNewFavourites = ()=>{\r\n         const newCity = {\r\n                id: v4(),\r\n                cityName:cityname,\r\n                country: country\r\n         };\r\n\r\n         addCity(newCity);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container text-light\">\r\n            <div className=\"Card\">\r\n                {cityname ? (<h1 className=\"text-white text-center\">Today</h1>): null}\r\n                <br/>\r\n                <h1 className=\"text-white py-3\">{cityname}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${weatherIcon} display-1`} />\r\n                </h5>\r\n\r\n                {/* Get Celsius */}\r\n                {temp_celsius ? (\r\n                    <h1 className=\"py-2\">{temp_celsius}&deg;</h1>\r\n                ) : null}\r\n\r\n                {/* show max and min temp */}\r\n                {minMaxTemp(temp_min, temp_max)}\r\n\r\n                {/* Weather description */}\r\n                <h4 className=\"py-3\">\r\n                    {description.charAt(0).toUpperCase() +\r\n                    description.slice(1)}\r\n                </h4>\r\n                <br/>\r\n                {(cityname) ? (\r\n                    <div className=\"details-container\">\r\n                        <p>\r\n                            <button className=\"btn bg-transparent text-white\" type=\"button\" onClick={toggleDetails} data-toggle=\"collapse\"\r\n                                    data-target=\"#collapseExample\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\r\n                                {!showDetails ? \"Details\" : \"Hide details\"}\r\n                            </button>\r\n                        </p>\r\n                        <div className=\"collapse\" id=\"collapseExample\">\r\n                             <div >\r\n                                 <h5 className=\"my-2\">pressure: {pressure} hPa</h5>\r\n                                 <h5 className=\"my-2\">humidity: {humidity} %</h5>\r\n                                 <h5 className=\"my-2\">wind speed: {windSpeed} meter/sec</h5>\r\n                                 <h5 className=\"my-2\">wind deg: {windDegree}°</h5>\r\n                                 <div className=\"row\">\r\n                                     <div className=\"col-md-6 col-sm-12 pl-2\">\r\n                                         <h5 className=\"my-2\">sunrise time: {getSunHour(sunrise)}</h5>\r\n                                     </div>\r\n                                     <div className=\"col-md-6 col-sm-12 pl-2\">\r\n                                         <h5 className=\"my-2\">sunset time: {getSunHour(sunset)}</h5>\r\n                                     </div>\r\n                                 </div>\r\n                             </div>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n                {(!isSearchPage && cityname) ? (<button className=\"btn btn-warning my-3\" onClick={addNewFavourites}>Add to Favourites</button>):null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction minMaxTemp(min,max) {\r\n    if(min && max){\r\n        return (\r\n            <h3>\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        )\r\n    }\r\n}\r\n\r\nfunction getSunHour(unix_timestamp){\r\n    let date = new Date(unix_timestamp * 1000);\r\n\r\n    let hours = date.getHours();\r\n\r\n    let minutes = \"0\" + date.getMinutes();\r\n\r\n    let seconds = \"0\" + date.getSeconds();\r\n\r\n    let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n\r\n    return formattedTime;\r\n}\r\n\r\nWeather.propTypes = {\r\n    addCity: PropTypes.func,\r\n    cityname: PropTypes.string,\r\n    country: PropTypes.string,\r\n    weatherIcon: PropTypes.string,\r\n    temp_celsius: PropTypes.string,\r\n    temp_max: PropTypes.string,\r\n    temp_min: PropTypes.string,\r\n    description: PropTypes.string,\r\n    isSearchPage:PropTypes.bool.isRequired,\r\n    pressure: PropTypes.number,\r\n    humidity: PropTypes.number,\r\n    windSpeed: PropTypes.number,\r\n    windDegree: PropTypes.number,\r\n    sunrise: PropTypes.number,\r\n    sunset: PropTypes.number,\r\n};\r\n\r\nexport default connect(null,{addCity})(Weather);\r\n","import {\r\n    ADD_CITY,\r\n    REMOVE_CITY\r\n} from \"./types\";\r\n\r\nexport const addCity = (newCity) => dispatch => {\r\n    dispatch({\r\n        type: ADD_CITY,\r\n        payload: newCity\r\n    })\r\n};\r\n\r\nexport const removeCity = (id) => dispatch => {\r\n   dispatch({\r\n       type: REMOVE_CITY,\r\n       payload: id\r\n   })\r\n};\r\n\r\nexport const loadState = () => {\r\n    try{\r\n        const serializedState = localStorage.getItem(\"state\");\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState)\r\n    }catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = state => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(\"state\", serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n","export const ADD_CITY = 'ADD_CITY';\r\nexport const REMOVE_CITY = 'REMOVE_CITY';\r\n","import React, {useState,useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ForecastItem = (\r\n    {\r\n        date,\r\n        cityname,\r\n        weatherId,\r\n        temp_celsius,\r\n        temp_max,\r\n        temp_min,\r\n        description\r\n    }) => {\r\n    const [weatherIcon, setWeatherIcon] = useState('');\r\n\r\n    const setIcon = (weatherId) =>{\r\n        switch (true) {\r\n            case weatherId >= 200 && weatherId < 232:\r\n                setWeatherIcon(\"wi-thunderstorm\")\r\n                break;\r\n            case weatherId >= 300 && weatherId <= 321:\r\n                setWeatherIcon(\"wi-sleet\")\r\n                break;\r\n            case weatherId >= 500 && weatherId <= 521:\r\n                setWeatherIcon(\"wi-storm-showers\")\r\n                break;\r\n            case weatherId >= 600 && weatherId <= 622:\r\n                setWeatherIcon(\"wi-snow\")\r\n                break;\r\n            case weatherId >= 701 && weatherId <= 781:\r\n                setWeatherIcon(\"wi-fog\")\r\n                break;\r\n            case weatherId === 800:\r\n                setWeatherIcon(\"wi-day-sunny\")\r\n                break;\r\n            case weatherId >= 801 && weatherId <= 804:\r\n                setWeatherIcon(\"wi-day-fog\")\r\n                break;\r\n            default:\r\n                setWeatherIcon(\"wi-day-fog\")\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setIcon(weatherId)\r\n    },[weatherId]);\r\n\r\n    return (\r\n        <div className=\"text-white\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h3>{calculateDate(date)}</h3>\r\n                    <h5 className=\"py-4\">\r\n                        <i className={`wi ${weatherIcon} display-1`} />\r\n                    </h5>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                    <div className=\"col p-5\">\r\n                        {/* Get Celsius */}\r\n                        {temp_celsius ? (\r\n                            <h2 className=\"py-2\">{calCelsius(temp_celsius)}&deg;</h2>\r\n                        ) : null}\r\n\r\n                        {/* show max and min temp */}\r\n                        {minMaxTemp(calCelsius(temp_min), calCelsius(temp_max))}\r\n\r\n                        {/* Weather description */}\r\n                        <h4 className=\"py-3\">\r\n                            {description.charAt(0).toUpperCase() +\r\n                            description.slice(1)}\r\n                        </h4>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst calculateDate = (more) =>{\r\n    let now = new Date();\r\n    now.setDate(now.getDate()+more);\r\n\r\n    let dd = now.getDate();\r\n    let mm = now.getMonth()+1;\r\n\r\n    if(mm < 10)\r\n        mm = \"0\" + mm;\r\n\r\n    return dd + \"/\" + mm;\r\n}\r\n\r\nconst calCelsius = (temp)=> {\r\n    let cell = Math.floor(temp - 273.15);\r\n    return cell;\r\n}\r\n\r\nconst minMaxTemp = (min,max) => {\r\n    if(min && max){\r\n        return (\r\n            <h3>\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        )\r\n    }\r\n}\r\n\r\nForecastItem.propTypes = {\r\n    date: PropTypes.number.isRequired,\r\n    weatherId: PropTypes.number.isRequired,\r\n    cityname: PropTypes.string.isRequired,\r\n    temp_celsius: PropTypes.number.isRequired,\r\n    temp_max: PropTypes.number.isRequired,\r\n    temp_min: PropTypes.number.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ForecastItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport ForecastItem from \"./ForecastItem\";\r\nimport { v4 } from 'node-uuid';\r\nimport Slider from \"react-slick\";\r\n\r\nconst ForecastsCarousel = ({forecastList, cityname}) => {\r\n\r\n    let sliderSetting = {\r\n        dots: true,\r\n        infinite: true,\r\n        speed: 500,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1\r\n    }\r\n\r\n    let foreCastItemList;\r\n    if(forecastList !== undefined)\r\n        foreCastItemList = forecastList.map((item,i) => (\r\n            <div key={i}>\r\n                <ForecastItem\r\n                    date={i+1}\r\n                    cityname={cityname}\r\n                    weatherId={item.weather[0].id}\r\n                    temp_celsius={item.main.temp}\r\n                    temp_max={item.main.temp_max}\r\n                    temp_min={item.main.temp_min}\r\n                    description={item.weather[0].description}\r\n                />\r\n            </div>\r\n        ));\r\n    else\r\n        foreCastItemList = null;\r\n\r\n    console.log(foreCastItemList)\r\n\r\n    return forecastList !== undefined && cityname !== undefined ? (\r\n        <div className=\"text-center align-content-center forecast-big-wrapper\">\r\n            <h2 className=\"text-white py-3\">Forecast for the next 6 days</h2>\r\n            <div className=\"slider-container\">\r\n                <Slider {...sliderSetting}>\r\n                    {foreCastItemList}\r\n                </Slider>\r\n            </div>\r\n        </div>\r\n    ): null;\r\n};\r\n\r\nForecastsCarousel.propTypes = {\r\n    forecastList: PropTypes.array,\r\n    cityname: PropTypes.string\r\n};\r\n\r\nexport default ForecastsCarousel;\r\n","import React, {Component} from 'react';\r\nimport Form from \"./Form\";\r\nimport Weather from \"./Weather\";\r\nimport ForecastsCarousel from \"./Forecast/ForecastsCarousel\";\r\nimport defaultJSON from '../config/default';\r\n\r\nconst API_KEY = defaultJSON.API_KEY;\r\n\r\nclass SearchPage extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            city: undefined,\r\n            country: undefined,\r\n            icon: undefined,\r\n            main: undefined,\r\n            celsius: undefined,\r\n            temp_max: null,\r\n            temp_min: null,\r\n            pressure: null,\r\n            humidity: null,\r\n            windSpeed: null,\r\n            windDegree: null,\r\n            sunrise: null,\r\n            sunset: null,\r\n            description: \"\",\r\n            error: false,\r\n            forecastList: undefined,\r\n            isForecastingLoading: true\r\n        };\r\n\r\n        this.weatherIcon = {\r\n            Thunderstorm: \"wi-thunderstorm\",\r\n            Drizzle: \"wi-sleet\",\r\n            Rain: \"wi-storm-showers\",\r\n            Snow: \"wi-snow\",\r\n            Atmosphere: \"wi-fog\",\r\n            Clear: \"wi-day-sunny\",\r\n            Clouds: \"wi-day-fog\"\r\n        };\r\n    }\r\n\r\n    get_WeatherIcon(icons, rangeId) {\r\n        switch (true) {\r\n            case rangeId >= 200 && rangeId < 232:\r\n                this.setState({ icon: icons.Thunderstorm });\r\n                break;\r\n            case rangeId >= 300 && rangeId <= 321:\r\n                this.setState({ icon: icons.Drizzle });\r\n                break;\r\n            case rangeId >= 500 && rangeId <= 521:\r\n                this.setState({ icon: icons.Rain });\r\n                break;\r\n            case rangeId >= 600 && rangeId <= 622:\r\n                this.setState({ icon: icons.Snow });\r\n                break;\r\n            case rangeId >= 701 && rangeId <= 781:\r\n                this.setState({ icon: icons.Atmosphere });\r\n                break;\r\n            case rangeId === 800:\r\n                this.setState({ icon: icons.Clear });\r\n                break;\r\n            case rangeId >= 801 && rangeId <= 804:\r\n                this.setState({ icon: icons.Clouds });\r\n                break;\r\n            default:\r\n                this.setState({ icon: icons.Clouds });\r\n        }\r\n    }\r\n\r\n    calCelsius(temp) {\r\n        let cell = Math.floor(temp - 273.15);\r\n        return cell;\r\n    }\r\n\r\n    getWeather = async e => {\r\n        e.preventDefault();\r\n\r\n        const country = e.target.elements.country.value;\r\n        const city = e.target.elements.city.value;\r\n\r\n        if (country && city) {\r\n            try{\r\n                const api_call = await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\r\n                );\r\n\r\n                const api_call_forecast = await fetch(\r\n                    `http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}`\r\n                );\r\n\r\n                const response = await api_call.json();\r\n\r\n                const forecastResponse = await api_call_forecast.json();\r\n\r\n                this.setState({\r\n                    city: `${response.name}, ${response.sys.country}`,\r\n                    country: response.sys.country,\r\n                    main: response.weather[0].main,\r\n                    celsius: \"\"+this.calCelsius(response.main.temp),\r\n                    temp_max: \"\"+this.calCelsius(response.main.temp_max),\r\n                    temp_min: \"\"+this.calCelsius(response.main.temp_min),\r\n                    description: response.weather[0].description,\r\n                    pressure: response.main.pressure,\r\n                    humidity: response.main.humidity,\r\n                    windSpeed: response.wind.speed,\r\n                    windDegree: response.wind.deg,\r\n                    sunrise: response.sys.sunrise,\r\n                    sunset: response.sys.sunset,\r\n                    error: false,\r\n                    forecastList: forecastResponse.list.slice(0,6)\r\n                });\r\n\r\n                // seting icons\r\n                this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\r\n\r\n                console.log(response);\r\n            }catch (err) {\r\n                this.setState({\r\n                    error: true\r\n                })\r\n            }\r\n        } else {\r\n            this.setState({\r\n                error: true\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form loadWeather={this.getWeather} error={this.state.error} />\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6 col-sm-12 my-5\">\r\n                            <Weather\r\n                                cityname={this.state.city}\r\n                                country={this.state.country}\r\n                                weatherIcon={this.state.icon}\r\n                                temp_celsius={this.state.celsius}\r\n                                temp_max={this.state.temp_max}\r\n                                temp_min={this.state.temp_min}\r\n                                description={this.state.description}\r\n                                pressure={this.state.pressure}\r\n                                humidity={this.state.humidity}\r\n                                windSpeed={this.state.windSpeed}\r\n                                windDegree={this.state.windDegree}\r\n                                sunrise={this.state.sunrise}\r\n                                sunset={this.state.sunset}\r\n                                isSearchPage={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-md-6 col-sm-12 my-5\">\r\n                            {this.state.forecastList ? (<ForecastsCarousel\r\n                                forecastList={this.state.forecastList}\r\n                                cityname={this.state.city}\r\n                            />) : null}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchPage;\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {removeCity} from '../actions/favourites'\r\nimport PropTypes from 'prop-types'\r\nimport Weather from \"./Weather\";\r\nimport Octicon, {X} from \"@primer/octicons-react\";\r\nimport defaultJSON from '../config/default';\r\n\r\nconst API_KEY = defaultJSON.API_KEY;\r\n\r\n/*fixme:\r\n*  rendilo uno stateless component */\r\nclass FavouritePage extends Component {\r\n    state = {\r\n        currentCity: '',\r\n        currentCountry:'',\r\n        currentWeatherIcon: '',\r\n        currentTemp_celsius: '',\r\n        currentTemp_max: '',\r\n        currentTemp_min: '',\r\n        currentDescription: '',\r\n        currentPressure: null,\r\n        currentHumidity: null,\r\n        currentWindSpeed: null,\r\n        currentWindDegree: null,\r\n        currentSunriseTime: null,\r\n        currentSunsetTime: null,\r\n        error: false\r\n    };\r\n\r\n    //fixme: make a component that return the icon\r\n    weatherIcon = {\r\n        Thunderstorm: \"wi-thunderstorm\",\r\n        Drizzle: \"wi-sleet\",\r\n        Rain: \"wi-storm-showers\",\r\n        Snow: \"wi-snow\",\r\n        Atmosphere: \"wi-fog\",\r\n        Clear: \"wi-day-sunny\",\r\n        Clouds: \"wi-day-fog\"\r\n    };\r\n\r\n    get_WeatherIcon(icons, rangeId){\r\n        switch (true) {\r\n            case rangeId >= 200 && rangeId < 232:\r\n                this.setState({ currentWeatherIcon: icons.Thunderstorm });\r\n                break;\r\n            case rangeId >= 300 && rangeId <= 321:\r\n                this.setState({ currentWeatherIcon: icons.Drizzle });\r\n                break;\r\n            case rangeId >= 500 && rangeId <= 521:\r\n                this.setState({ currentWeatherIcon: icons.Rain });\r\n                break;\r\n            case rangeId >= 600 && rangeId <= 622:\r\n                this.setState({ currentWeatherIcon: icons.Snow });\r\n                break;\r\n            case rangeId >= 701 && rangeId <= 781:\r\n                this.setState({ currentWeatherIcon: icons.Atmosphere });\r\n                break;\r\n            case rangeId === 800:\r\n                this.setState({ currentWeatherIcon: icons.Clear });\r\n                break;\r\n            case rangeId >= 801 && rangeId <= 804:\r\n                this.setState({ currentWeatherIcon: icons.Clouds });\r\n                break;\r\n            default:\r\n                this.setState({ currentWeatherIcon: icons.Clouds });\r\n        }\r\n    }\r\n\r\n    setCurrentCity = async (fav) =>{\r\n\r\n        if (fav.country && fav.cityName) {\r\n            const city = (fav.cityName.split(\",\"))[0];\r\n            const api_call = await fetch(\r\n                `http://api.openweathermap.org/data/2.5/weather?q=${city},${fav.country}&appid=${API_KEY}`\r\n            );\r\n\r\n            const response = await api_call.json();\r\n            console.log(response)\r\n\r\n            this.setState({\r\n                currentCity: fav.cityName,\r\n                currentCountry: fav.country,\r\n                currentWeatherIcon: fav.weatherIcon,\r\n                currentTemp_celsius: \"\"+this.calCelsius(response.main.temp),\r\n                currentTemp_max: \"\"+this.calCelsius(response.main.temp_max),\r\n                currentTemp_min: \"\"+this.calCelsius(response.main.temp_min),\r\n                currentDescription: response.weather[0].description,\r\n                currentPressure: response.main.pressure,\r\n                currentHumidity: response.main.humidity,\r\n                currentWindSpeed: response.wind.speed,\r\n                currentWindDegree: response.wind.deg,\r\n                currentSunriseTime: response.sys.sunrise,\r\n                currentSunsetTime: response.sys.sunset,\r\n                error: false\r\n            })\r\n\r\n            this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\r\n\r\n        }else{\r\n            this.setState({\r\n                error: true\r\n            })\r\n        }\r\n\r\n    };\r\n\r\n    calCelsius = (temp) =>{\r\n        let cell = Math.floor(temp - 273.15);\r\n        return cell;\r\n    }\r\n\r\n    removeFav = (id,cityName) =>{\r\n        if(cityName === this.state.currentCity)\r\n            this.setState({\r\n                currentCity: '',\r\n                currentCountry:'',\r\n                currentWeatherIcon: '',\r\n                currentTemp_celsius: '',\r\n                currentTemp_max: '',\r\n                currentTemp_min: '',\r\n                currentDescription: ''\r\n            });\r\n\r\n        this.props.removeCity(id)\r\n    };\r\n\r\n    render() {\r\n        const {favourites} = this.props.favourites;\r\n        console.log(favourites);\r\n        const favouritesList = favourites.map(fav => (\r\n            <li\r\n                key={fav.id}\r\n                className=\"list-group-item bg-transparent\"\r\n                onClick={ e => this.setCurrentCity(fav)}\r\n            >\r\n                <p className=\"fav-cityname-p\">{fav.cityName}</p>\r\n                <button className=\"btn delelte-fav-btn pull-right\" onClick={e => this.removeFav(fav.id,fav.cityName)}>\r\n                    <Octicon icon={X} size='small' className=\"delete-fav-icon\"/>\r\n                </button>\r\n\r\n            </li>\r\n            ));\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 col-sm-12\">\r\n                    <div>\r\n                        <div className=\"text-light\">\r\n                            <h3 className=\"text-white py-3\">Your favorites</h3>\r\n                            {favourites ?\r\n                                <ul className=\"list-group list-group-flush\">{favouritesList}</ul>\r\n                                : (<h3>Not favourites yet</h3>)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-6 col-sm-12\">\r\n                    {this.state.error ? (\r\n                        <div className=\"alert alert-danger\" role=\"alert\">\r\n                            Error\r\n                        </div>\r\n                    ): null}\r\n                    <Weather\r\n                        isSearchPage={true}\r\n                        cityname={this.state.currentCity}\r\n                        weatherIcon={this.state.currentWeatherIcon}\r\n                        temp_celsius={this.state.currentTemp_celsius}\r\n                        temp_max={this.state.currentTemp_max}\r\n                        temp_min={this.state.currentTemp_min}\r\n                        description={this.state.currentDescription}\r\n                        pressure={this.state.currentPressure}\r\n                        humidity={this.state.currentHumidity}\r\n                        windSpeed={this.state.currentWindSpeed}\r\n                        windDegree={this.state.currentWindDegree}\r\n                        sunrise={this.state.currentSunriseTime}\r\n                        sunset={this.state.currentSunsetTime}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFavouritePage.propTypes = {\r\n    removeCity: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    favourites: state.favourites\r\n});\r\n\r\nexport default connect(mapStateToProps,{removeCity})(FavouritePage);\r\n","import {ADD_CITY, REMOVE_CITY} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    favourites: [],\r\n    loading: true\r\n};\r\n\r\nexport default function (state=initialState,action) {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case ADD_CITY:\r\n\r\n            return {\r\n                ...state,\r\n                favourites: [payload, ...state.favourites],\r\n                loading: false\r\n            };\r\n        case REMOVE_CITY:\r\n            return {\r\n                ...state,\r\n                favourites: state.favourites.filter(fav => fav.id !== payload)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport favourites from './favouritesReducer'\r\n\r\nexport default combineReducers({\r\n    favourites\r\n})\r\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport {loadState, saveState} from './actions/favourites'\r\nimport throttle from 'lodash.throttle'\r\n\r\nconst initialState = {};\r\n\r\nconst persistedState = loadState();\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    persistedState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nstore.subscribe(throttle(() =>{\r\n    saveState(store.getState());\r\n},1000));\r\n\r\nexport default store;","import React, {Component} from 'react';\r\nimport {HashRouter , Switch, Route} from 'react-router-dom'\r\nimport './App.css';\r\nimport \"weather-icons/css/weather-icons.css\";\r\nimport 'bootstrap/dist/css/bootstrap-grid.min.css';\r\nimport NavBar from \"./components/NavBar\";\r\nimport SearchPage from \"./components/SearchPage\";\r\nimport FavouritePage from \"./components/FavouritePage\";\r\nimport {Provider} from 'react-redux';\r\nimport store from './store'\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <HashRouter>\r\n                    <div className=\"App\">\r\n                        <NavBar/>\r\n                        <Switch>\r\n                            <Switch>\r\n                                <Route exact path='/' component={SearchPage}/>\r\n                                <Route exact path='/favourites' component={FavouritePage}/>\r\n                            </Switch>\r\n                        </Switch>\r\n                    </div>\r\n                </HashRouter>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}